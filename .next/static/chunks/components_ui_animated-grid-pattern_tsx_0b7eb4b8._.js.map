{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///home/wiki/portfolio/components/ui/animated-grid-pattern.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { motion } from \"motion/react\";\r\nimport { useEffect, useId, useRef, useState } from \"react\";\r\n\r\nimport { cn } from \"@/lib/utils\";\r\n\r\ninterface AnimatedGridPatternProps {\r\n  width?: number;\r\n  height?: number;\r\n  x?: number;\r\n  y?: number;\r\n  strokeDasharray?: string | number;\r\n  numSquares?: number;\r\n  className?: string;\r\n  maxOpacity?: number;\r\n  duration?: number;\r\n  repeatDelay?: number;\r\n}\r\n\r\nexport default function AnimatedGridPattern({\r\n  width = 40,\r\n  height = 40,\r\n  x = -1,\r\n  y = -1,\r\n  strokeDasharray = 0,\r\n  numSquares = 50,\r\n  className,\r\n  maxOpacity = 0.5,\r\n  duration = 4,\r\n  ...props\r\n}: AnimatedGridPatternProps) {\r\n  const id = useId();\r\n  const containerRef = useRef(null);\r\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0 });\r\n  const [squares, setSquares] = useState(() => generateSquares(numSquares));\r\n\r\n  function getPos() {\r\n    return [\r\n      Math.floor((Math.random() * dimensions.width) / width),\r\n      Math.floor((Math.random() * dimensions.height) / height),\r\n    ];\r\n  }\r\n\r\n  // Adjust the generateSquares function to return objects with an id, x, and y\r\n  function generateSquares(count: number) {\r\n    return Array.from({ length: count }, (_, i) => ({\r\n      id: i,\r\n      pos: getPos(),\r\n    }));\r\n  }\r\n\r\n  // Function to update a single square's position\r\n  const updateSquarePosition = (id: number) => {\r\n    setSquares((currentSquares) =>\r\n      currentSquares.map((sq) =>\r\n        sq.id === id\r\n          ? {\r\n              ...sq,\r\n              pos: getPos(),\r\n            }\r\n          : sq\r\n      )\r\n    );\r\n  };\r\n\r\n  // Update squares to animate in\r\n  useEffect(() => {\r\n    if (dimensions.width && dimensions.height) {\r\n      setSquares(generateSquares(numSquares));\r\n    }\r\n  }, [dimensions, numSquares]);\r\n\r\n  // Resize observer to update container dimensions\r\n  useEffect(() => {\r\n    const resizeObserver = new ResizeObserver((entries) => {\r\n      for (const entry of entries) {\r\n        setDimensions({\r\n          width: entry.contentRect.width,\r\n          height: entry.contentRect.height,\r\n        });\r\n      }\r\n    });\r\n\r\n    if (containerRef.current) {\r\n      resizeObserver.observe(containerRef.current);\r\n    }\r\n\r\n    return () => {\r\n      if (containerRef.current) {\r\n        resizeObserver.unobserve(containerRef.current);\r\n      }\r\n    };\r\n  }, [containerRef]);\r\n\r\n  return (\r\n    <svg\r\n      ref={containerRef}\r\n      aria-hidden=\"true\"\r\n      className={cn(\r\n        \"pointer-events-none absolute inset-0 h-full w-full fill-gray-400/30 stroke-gray-400/30\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n      <defs>\r\n        <pattern\r\n          id={id}\r\n          width={width}\r\n          height={height}\r\n          patternUnits=\"userSpaceOnUse\"\r\n          x={x}\r\n          y={y}\r\n        >\r\n          <path\r\n            d={`M.5 ${height}V.5H${width}`}\r\n            fill=\"none\"\r\n            strokeDasharray={strokeDasharray}\r\n          />\r\n        </pattern>\r\n      </defs>\r\n      <rect width=\"100%\" height=\"100%\" fill={`url(#${id})`} />\r\n      <svg x={x} y={y} className=\"overflow-visible\">\r\n        {squares.map(({ pos: [x, y], id }, index) => (\r\n          <motion.rect\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: maxOpacity }}\r\n            transition={{\r\n              duration,\r\n              repeat: 1,\r\n              delay: index * 0.1,\r\n              repeatType: \"reverse\",\r\n            }}\r\n            onAnimationComplete={() => updateSquarePosition(id)}\r\n            key={`${x}-${y}-${index}`}\r\n            width={width - 1}\r\n            height={height - 1}\r\n            x={x * width + 1}\r\n            y={y * height + 1}\r\n            fill=\"currentColor\"\r\n            strokeWidth=\"0\"\r\n          />\r\n        ))}\r\n      </svg>\r\n    </svg>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 185, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}